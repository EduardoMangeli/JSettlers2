apply plugin: 'java'
apply plugin: 'com.google.protobuf'
apply plugin: 'war'  // for jsettlers-webapp servlet
apply plugin: 'application'
apply plugin: 'idea'

buildscript {
    repositories {
        mavenCentral()
        maven { url "http://google-diff-match-patch.googlecode.com/svn/trunk/maven" }
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.3'
    }
}

mainClassName = "soc.client.SOCPlayerClient"

compileJava {
  sourceCompatibility = '1.7'
  targetCompatibility = '1.7'
}
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'  // override the system's default encoding
        // To test that this has an effect, use 'Cp1252' instead here and expect "unmappable character" errors in StringUtil.java
}

// see https://github.com/google/protobuf-gradle-plugin
protobuf {
    generatedFilesBaseDir = "${projectDir}/generated/src/proto"
    protoc {
        artifact = 'com.google.protobuf:protoc:3.0.0'
    }
    // use protobuf-lite, not full protobuf-java:
    plugins {
        javalite {
            // The codegen for lite comes as a separate artifact
           artifact = 'com.google.protobuf:protoc-gen-javalite:3.0.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                remove java
                python { }  // will run protoc -python_out=... only if src/main/python/ has files
            }
            task.plugins {
                javalite {
                    outputSubDir = 'java'  // generated/src/proto/main/java/, not default javalite, to match rest of proj structure
                }
            }
        }
    }
}

repositories {
    mavenCentral()
}
//
//jar {
//    into 'resources', {
//        from 'resources'
//    }
//}

// The .WAR built here is socserver.war, not anything for an HTML5 web app/client:
// The html5 client will be a separate build.
war {
    archiveName = 'socserver.war'  // no version, for constant prefix at deploy
    // includes src/main/webapp by default
    rootSpec.exclude("**/*.class")  // works, but empty dirs
    rootSpec.exclude("**/*.proto")
    rootSpec.exclude("**/protobuf*.jar")
    rootSpec.exclude("**/soc/**")  // want only socweb, not soc, classes
    rootSpec.exclude("**/resources/**")
    // TODO exclude empty dirs
}

dependencies {
    testCompile 'junit:junit:4.12'
    compile 'com.google.protobuf:protobuf-lite:3.0.1'
    providedCompile 'javax.servlet:javax.servlet-api:3.1.0'  // Java EE 7
}

